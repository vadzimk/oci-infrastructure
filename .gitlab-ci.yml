# using hints from template
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Terraform.gitlab-ci.yml

workflow:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "master"
    changes:
      - "**/*.tf"
      - "**/*.sh"
      - "*.gitlab-ci.yml"
    when: always
  - when: never

variables:
  TF_STATE: ${CI_PROJECT_NAME}
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}

include:
#  - template: Terraform/Base.gitlab-ci.yml
  - local: 'Base.gitlab-ci.yml'

stages:
  - validate_infrastructure_code
  - build_infrastructure_plan
  - deploy_infrastructure
  - register_gitlab_runner

validate:
  stage: validate_infrastructure_code
  extends:
    .terraform:validate

plan:
  stage: build_infrastructure_plan
  extends:
    .terraform:build # ==plan
  before_script:
    - cat "$TF_VARS" > "$(pwd)/terraform.tfvars"
    - mkdir "$(pwd)/.oci"
    - cat "$KEY_FILE" > "$(pwd)/.oci/terraform-configuration_2022-06-11T13 01 59.878Z.pem"
    - cat "$WS_KEY_PUB" > "$(pwd)/.oci/wskey.pub"
    - cat "$MACHINE_USER_KEY_PUB" > "$(pwd)/.oci/machine_user_key.pub.pem"
    - cat "$PGBACKUPS_USER_KEY_PUB" > "$(pwd)/.oci/pgbackups_user_key.pub.pem"
    - ls -la
    - ls -la .oci/
    - export TF_ADDRESS=$TF_ADDRESS
    - echo $TF_ADDRESS
    - |
      terraform init -reconfigure \
      -backend-config="address=${TF_ADDRESS}" \
      -backend-config="lock_address=${TF_ADDRESS}/lock" \
      -backend-config="unlock_address=${TF_ADDRESS}/lock" \
      -backend-config="username=gitlab-ci-token" \
      -backend-config="password=${CI_JOB_TOKEN}" \
      -backend-config="lock_method=POST" \
      -backend-config="unlock_method=DELETE" \
      -backend-config="retry_wait_min=5"


apply:
  stage: deploy_infrastructure
  extends: .terraform:deploy # ==apply
  before_script:
    - cat "$TF_VARS" > "$(pwd)/terraform.tfvars"
    - mkdir "$(pwd)/.oci"
    - cat "$KEY_FILE" > "$(pwd)/.oci/terraform-configuration_2022-06-11T13 01 59.878Z.pem"
    - cat "$WS_KEY_PUB" > "$(pwd)/.oci/wskey.pub"
    - cat "$MACHINE_USER_KEY_PUB" > "$(pwd)/.oci/machine_user_key.pub.pem"
    - cat "$PGBACKUPS_USER_KEY_PUB" > "$(pwd)/.oci/pgbackups_user_key.pub.pem"
    - ls -htla
  after_script:
    - gitlab-terraform output -json > ter_output.json # artifact
  artifacts:
      paths:
      - ter_output.json
  environment:
    name: $TF_STATE
  when: manual
  allow_failure: false # this will block subsequent stages until current job succeeds

update_dns:
  stage: deploy_infrastructure
  needs:
    - apply
  variables:
    DOMAIN_NAME: "vadzimk.com"
  before_script:
    - apk add jq
  script:
    - export WEBSERVER_PUBLIC_IP=$(cat ter_output.json | jq -r '."webserver-public_ip".value')
    - |
      for entry in "*" "$DOMAIN_NAME" ; do
        DNS_RECORD_IDENTIFIER_TAG=$(curl --request GET \
                --url "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_IDENTIFIER}/dns_records?type=A&name=${entry}" \
                   -H "X-Auth-Email: ${CLOUDFLARE_EMAIL}" \
                   -H "X-Auth-Key: ${CLOUDFLARE_AUTH_KEY}" \
                   -H "Content-Type: application/json" | jq -r .result | jq -r '.[0].id');
        echo -e "\nDNS_RECORD_IDENTIFIER_TAG=$DNS_RECORD_IDENTIFIER_TAG";
        echo "Updating $entry ip $WEBSERVER_PUBLIC_IP";
        curl --request PUT \
        --url https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_IDENTIFIER}/dns_records/${DNS_RECORD_IDENTIFIER_TAG} \
        -H "X-Auth-Email: ${CLOUDFLARE_EMAIL}" \
        -H "X-Auth-Key: ${CLOUDFLARE_AUTH_KEY}" \
        --data "{
        \"type\": \"A\",
        \"name\": \"${entry}\",
        \"content\": \"${WEBSERVER_PUBLIC_IP}\",
        \"ttl\": 3600,
        \"proxied\": false
        }";
        echo -e "\n";
      done;


register_runner:
  stage: register_gitlab_runner
  before_script:
    - ls -htla
    - apk add jq
    - export GITLAB_RUNNER_PUBLIC_IP=$(cat ter_output.json | jq -r '."gitlab-runner-public_ip".value')
    - export S3_SERVER_ADDRESS=$(cat ter_output.json | jq -r '."S3-ServerAddress".value')
    - export S3_ACCESS_KEY=$(cat ter_output.json | jq -r '."gitlab_runner_customer_secret_key_id".value')
    - export S3_SECRET_KEY=$(cat ter_output.json | jq -r '."gitlab_runner_customer_secret_key_value".value')
    - export S3_BUCKET_NAME=$(cat ter_output.json | jq -r '."gitlab-cache-bucket-name".value')
    - export S3_BUCKET_LOCATION=$(cat ter_output.json | jq -r '."region".value')
    - chmod 400 $WS_KEY
  script:
    - scp -o StrictHostKeyChecking=no -i ${WS_KEY} ./gitlab-runner/template-config.toml ubuntu@${GITLAB_RUNNER_PUBLIC_IP}:~
    # https://docs.gitlab.com/runner/configuration/advanced-configuration.html
    # GITLAB_RUNNER_REGISTRATION_TOKEN may be replaced on each manual trigger of the job
    - ssh -o StrictHostKeyChecking=no -i ${WS_KEY} ubuntu@${GITLAB_RUNNER_PUBLIC_IP} "
      ls -htla;
      sudo gitlab-runner register \
      --non-interactive \
      --url 'https://gitlab.com/' \
      --limit 4 \
      --config '/etc/gitlab-runner/config.toml'
      --template-config '/home/ubuntu/template-config.toml' \
      --registration-token ${GITLAB_RUNNER_REGISTRATION_TOKEN} \
      --cache-s3-server-address ${S3_SERVER_ADDRESS} \
      --cache-s3-access-key ${S3_ACCESS_KEY} \
      --cache-s3-secret-key ${S3_SECRET_KEY} \
      --cache-s3-bucket-name ${S3_BUCKET_NAME} \
      --cache-s3-bucket-location ${S3_BUCKET_LOCATION} && \
      sudo gitlab-runner restart;"
  when: manual
  allow_failure: true # this is an optional job and the pipeline needs to declare success regardless of triggering this job in order to provide artifacts of the apply job to other projects pipelines
